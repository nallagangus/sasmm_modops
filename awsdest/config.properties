[Config]
# set verbose mode, default is False. This is not fully setup yet. Have to set some logging/debug setup - sudhir reddy
verbose=False

[AWS]
# AWS Access Key ID, Secret Access Key, region information. Recommend this id to be a "service account" in principle and not used by users .
# Prefer ID to be a "non-federated" user since this we use this creds over days/months as part of model publish destination as well as lambda arc
# and cannot handle tokens that get expired with federated ids.
# This id should have permissions to create/delete K8S deployment objects, service, ingress and load balancer objects on EKS cluster
# This id should also have permissions to generate pre-signed URLs for AWS S3, update Load balancer security groups Inbound rules
# In Case of Lambda setup following creds used to create lambda functions and setting up event notifications on s3 buckets/folders. K8S work by lambda function will be managed thru lambda-role
#
access.key.id=XXXXXXXXXXXXXXXXXX
secret.access.key=XXXXXXXXXXXXXXXXXXXXXXXXXXXX
region=us-east-1
eks.cluster.name=fsbu-sunall-eks-east-1
# presence of following indicates a working setup of ingress-controller and AWS ELB pointing to it.
# If you do not have a working nginx/ingress setup then comment it out and this code creates a default service/loadbalancer with AWS ELB
# Nginx-ingress is better over AWS LoadBalancer service as former allows sesson affinity with cookies which helps us track sessions
# With out Nginx-Ingress this setup still works but inefficient as getting scorefile back takes multiple iterations.
# Also the cookie set in AWS LB (sasmmcookie) should match to cookie set in scoringsasing ingress definition.
ingress.controller.url=http://a45e328847d8f11eab0fe0e927460cda-1444037516.us-east-1.elb.amazonaws.com

[K8S]
k8s.kubeconfig.path=tmp/tmp_kubeconfig
k8s.namespace=default
k8s.deployment.name=scoringsasmm
# following 2 names are hardcoded in k8s_pythonscoringmodel_loadbalancer/service.yaml. Change those files if you change these values.
k8s.service.name=scoringsassvc
k8s.lbalancer.name=scoringsaslb
k8s.ingress.name=scoringsasing

[site-specific]
# following represents the CIDR range python client is coming from to connect to EKS Load Balancer for scoring app.
# Security group behind ELB that supports EKS Load balancer should let that traffic in
python.client.network.cidr=149.173.0.0/16

# if application deployment and pods availability takes more than certain time give up and throw an error.
# increase the timeout if required.- In seconds
k8s.pods.creation.timeout=60

#Time limit on scoring all files - In seconds. This is for actual scoring and does not take into account time to download
# files from s3 to python client.
time.limit.on.scoring=300

##############
# Following needed only if you plan to use lambda scoring setup.

[lambda]
# following will be the role used by lambda function and should have permissions for k8s deployment scoring rpcoess +
#  AWSLambdaBasicExecutionRole and AWSXRayDaemonWriteAccess (later optional)
# same role as fsbu-user-modeluser used in python controller approach - IAM user id in [AWS]section in python-controller.
lambda.execution.arn.role=arn:aws:iam::617292774228:role/fsbu-sunall-scoring-lambdarole
# providing user some flexibility to avoid conflicts with lambda function names
lambda.function.name=sasmmscoring_lambda
# following 2 values to be picked after running setup_lambda_scoring_layer.py
# I cannot create layer in setup_lambda_scoring.py as every time we run against a new folder it creates a new layer and old layers retain versions are retained even if we delete them
# So just run layer creation one time as in https://stackoverflow.com/questions/60824745/aws-delete-lambda-layer-still-retains-layer-version-history/61103244#61103244
lambda.layer.arn=arn:aws:lambda:us-east-1:617292774228:layer:lambda_scoring_layer
lambda.layer.version=9
